/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function (l1, l2) {
    const stack1 = []
    const stack2 = []
    let carry = 0
    let nextNode = null


    while (l1 || l2) {
        if (l1) {
            stack1.push(l1.val)
        }
        if (l2) {
            stack2.push(l2.val)
        }

        l1 = l1?.next
        l2 = l2?.next
    }



    while (stack1.length > 0 || stack2.length > 0) {
        const value1 = stack1.pop() ?? 0
        const value2 = stack2.pop() ?? 0
        const sum = value1 + value2 + carry

        const node = new ListNode(0)

        if (sum > 9) {
            const digit = sum % 10;
            const first = Math.floor(sum / 10)

            node.val = digit
            carry = first
        } else {
            node.val = sum
            carry = 0
        }

        node.next = nextNode
        nextNode = node

    }

    if (carry > 0) {
        const head = new ListNode(carry)
        head.next = nextNode
        return head
    }


    return nextNode

};